generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("SUPABASE_DB_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  socialId        String? 
  socialProvider  String?
  email           String   @unique
  firstName       String
  lastName        String
  role            UserRole @default(CUSTOMER) 
  password        String?   
  salt            String?
  verifiedByAdmin Boolean  @default(false)
  verifiedEmail   Boolean  @default(false)
  tokens          Token[]
  createdAt       DateTime @default(now())
  orders          Order[]
  carts           Cart[]
  shippingAddresses UserShippingAddress[]
  @@unique([socialId,socialProvider])
}



model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  slug        String
  description String?
  parentId    Int?
  product     Product[]
  parent      Category?  @relation("ParentChildren", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children    Category[] @relation("ParentChildren")

  @@index([parentId])
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int?
  currentCart Boolean    @default(true)
  cartTotal   Float
  customer    User?       @relation(fields: [userId], references: [id])
  cartItems   CartItem[]
  order       Order?

  @@index([userId])
}

model CartItem {
  id          Int             @id @default(autoincrement())
  cartId      Int
  productId   Int?
  productName String
  quantity    Int
  price       Float
  variantId   Int?             
  variantName String?
  image       String?
  cart        Cart            @relation(fields: [cartId], references: [id])
  product     Product?         @relation(fields: [productId], references: [id],onDelete: SetNull)
  variant     ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@unique([cartId, productId, variantId])
  @@index([id])
  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

model ProductVariantImage {
  id                    Int            @id @default(autoincrement())
  publicId              String
  url                   String
  importedFromAttribute Boolean
  variantId             Int
  variant               ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  @@index([variantId])
}

model Order {
  id                  Int                   @id @default(autoincrement())
  customerEmail       String
  taxTotal            Float
  shippingTotal       Float
  cartTotal           Float
  orderTotal          Float
  date                DateTime              @default(now())
  status              OrderStatus
  tracking            Tracking?      
  customerId          Int?
  customer            User?                 @relation(fields: [customerId], references: [id])
  cartId              Int                   @unique
  cart                Cart                  @relation(fields: [cartId], references: [id])
  cardId              String                @unique
  card                Card                  @relation(fields:[cardId],references: [id])
  shippingAddress     OrderShippingAddress?  
  billingAddress      OrderBillingAddress?  
  shippingMethod      ShippingMethod        @relation(fields:[shippingMethodId], references: [id], onUpdate: NoAction)
  shippingMethodId    String
  @@index([customerId])
}
model Tracking{
  id               String  @id @default(uuid())
  tracking_number  String
  carrier          Carrier
  email_sent       Boolean @default(false)
  order_id         Int     @unique
  order            Order   @relation(fields: [order_id],references: [id])
}

model Token {
  id          String      @id @default(uuid())
  user_id     Int
  user        User        @relation(fields: [user_id],references: [id]) 
  token_type  Token_Type
  created_at  DateTime    @default(now())
  expir_at    DateTime 
}





model UserShippingAddress {
  id             Int      @id @default(autoincrement())
  customerId     Int?
  customer       User?    @relation(fields: [customerId], references: [id])
  firstName      String
  lastName       String
  country        String
  streetAddress  String
  streetAddress2 String?
  city           String
  state          String
  zipCode        String
  @@index([customerId])
}

model OrderShippingAddress {
  id             Int     @id @default(autoincrement())
  firstName      String
  lastName       String
  phone          String?
  country        String
  streetAddress  String
  streetAddress2 String?
  city           String
  state          String
  zipCode        String
  order          Order   @relation(fields:[order_id],references: [id], onDelete: Cascade)
  order_id       Int     @unique
}

model OrderBillingAddress {
  id             Int     @id @default(autoincrement())
  firstName      String
  lastName       String
  phone          String
  country        String
  streetAddress  String
  streetAddress2 String?
  city           String
  state          String
  zipCode        String
  order          Order   @relation(fields:[order_id],references: [id], onDelete: Cascade)
  order_id       Int     @unique
}

model Product {
  id              Int                  @id @default(autoincrement())
  position        Int                  @default(autoincrement())
  name            String               @unique
  price           Float
  sku             String?
  quantity        Int?
  description     String?
  slug            String               @unique
  active          Boolean              @default(true)
  available       Boolean              @default(false)
  managedStock    Boolean              @default(false)
  brand           Brand?               @relation(fields: [brandId],references: [id])
  brandId         Int? 
  taxCode         String               @default("")              
  images          ProductImage[]
  categories      Category[]
  productVariants ProductVariant[]
  attributeGroups AttributeGroup[] 
  cartItem        CartItem[]
  createdAt       DateTime             @default(now())
  @@index([brandId])
}

model ProductVariant {
  id                       Int                       @id @default(autoincrement())
  productId                Int
  price                    Float
  quantity                 Int
  available                Boolean                   @default(true)
  product                  Product                   @relation(fields: [productId], references: [id],onDelete: Cascade)
  cartItems                CartItem[]
  productVariantAttributes ProductVariantAttribute[]
  variantImages            ProductVariantImage[]
  sku                      String?
  description              String?
  @@index([productId])
}

model ProductVariantAttribute {
  id               Int            @id @default(autoincrement())
  productVariantId Int
  attibuteGroupId  Int
  attributeId      Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  attributeGroup   AttributeGroup @relation(fields: [attibuteGroupId], references: [id],onDelete: Cascade)
  attribute        Attribute      @relation(fields: [attributeId], references: [id],onDelete: Cascade)

  @@unique([productVariantId, attibuteGroupId, attributeId])
  @@index([productVariantId])
  @@index([attibuteGroupId])
  @@index([attributeId])
}

model AttributeGroup {
  id                       Int                       @id @default(autoincrement())
  name                     String                    
  productId                Int
  product                  Product                   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes               Attribute[]
  productVariantAttributes ProductVariantAttribute[]
  @@unique([name,productId])
  @@index([productId])
}

model Attribute {
  id                       Int                       @id @default(autoincrement())
  name                     String
  attributeGroupId         Int
  attributeGroup           AttributeGroup            @relation(fields: [attributeGroupId], references: [id], onDelete: Cascade)
  productVariantAttributes ProductVariantAttribute[]
  images                   AttributeImage[]
  @@unique([name,attributeGroupId])
  @@index([attributeGroupId])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  publicId  String
  productId Int     
  product   Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  position  Int

  @@index([productId])
}

model AttributeImage {
  id          Int       @id @default(autoincrement())
  url         String
  publicId    String
  attributeId Int
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  position    Int
  @@index([attributeId])
}

model Brand {
  id       Int @id @default(autoincrement())
  name     String
  products Product[]
}

model ShippingMethod {
  id String @id @default(uuid())
  name String
  price Float
  countries String[]
  stripeShippingId String
  active Boolean @default(false)
  orders Order[] 
}

model Card {
  id String @id @default(uuid())
  brand String
  lastFourDigits String
  expir_month Int
  expir_year Int
  order Order?

}

enum UserRole {
  ADMIN
  GUESTADMIN
  CUSTOMER
}

enum Token_Type {
  PASSWORD_RESET
  EMAIL_VERIFICATION
}
enum OrderStatus {
  PAYMENT_FAILED
  PAYMENT_PENDING
  PAYMENT_RECEIVED
  ORDER_SHIPPED
  ORDER_DELIVERED
  REFUNDED
  EXCHANGED
  CANCELED
  COMPLETED
}

enum Carrier {
  UPS
  USPS
  FEDEX
}